アプリケーションはすでに構築済（開発中の場合も含む）のときに
コンテナのみを構築する手順です。
※各種名称やパスワード、ポート番号等はそれぞれの環境に合わせて適宜書き換えてください。
※各種コマンドはこのファイルと同じ laravel-react フォルダにて実行してください。

1. init.sql を作成
  ルートディレクトリに init.sql を作成し、以下のSQLを書き込み

  CREATE DATABASE {データベース名};
  CREATE LOGIN {ユーザー名} WITH PASSWORD='{ユーザーパスワード}', DEFAULT_DATABASE={データベース名};

2. Azure Data Studio を起動
  ＜接続情報＞
  ・Server: localhost,{dbのポート番号}
  ・Authentication type: SQL Login
  ・User name: sa
  ・Password: {dbのSAパスワード}

3. Azure Data Studio でデータベースとユーザーを作成
  ・Ctrl+Nでクエリーウィンドウを表示
  ・init.sql に書き込んだSQLを入力し、[Run]をクリックしてDBとユーザーを作成

4. docker-compose.yml を作成
  docker-compose.yml.example をコピーしたファイルを作成し、
  コピーしたファイルの名前を docker-compose.yml に変更

5. docker-compose.yml を修正
  ※そのまま使用する場合は{dbのSAパスワード}のみ修正してください。
  ・サービス名（appとweb）
    services:
      {サービス名}:
  ・イメージ名（appとweb）
    services:
      {サービス名}:
        image: {イメージ名}
  ・コンテナ名（appとweb）
    services:
      {サービス名}:
        container_name: {コンテナ名}
  ・ポート番号（webのみ）
    services:
      {サービス名}:
        ports:
          - {ポート番号}:80
  ・ネットワーク名（appとweb）
    services:
      {サービス名}:
        networks:
          - {ネットワーク名}
    networks:
      {ネットワーク名}
  ・各種データベース接続情報（appのみ）
    services:
      {サービス名}:
        environment:
          - DB_CONNECTION=sqlsrv
          - DB_HOST={dbのサービス名}
          - DB_PORT={dbのポート番号}
          - DB_DATABASE={データベース名}
          - DB_USERNAME=sa
          - DB_PASSWORD={dbのSAパスワード}

6. .env を作成
  backendフォルダにある .env.example をコピーしたファイルを同ディレクトリに
  作成し、コピーしたファイルの名前を .env を作成する

7. .env を修正

  DB_CONNECTION=sqlsrv
  DB_HOST=127.0.0.1
  DB_PORT={dbのポート番号}
  DB_DATABASE={データベース名}
  DB_USERNAME={ユーザー名}
  DB_PASSWORD={ユーザーパスワード}

8. コンテナを構築
  > make build

9. コンテナを起動
  > make up

10. composer update を実行
  > make composer-update

11. アプリケーションキー(APP_KEY)を作成
  > make app-key-generate

12. npmパッケージをインストール
  > make npm-install

＜アプリケーションの実行方法＞
次のコマンドを実行し、
  > make npm-watch
コンパイルが完了したらブラウザにて以下のアドレスを入力
  http://localhost:{webのポート番号}
  または
  http://127.0.0.1:{webのポート番号}